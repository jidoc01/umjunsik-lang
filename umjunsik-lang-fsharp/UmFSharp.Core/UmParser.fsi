// Signature file for parser generated by fsyacc
module UmFSharp.Core.UmParser
type token = 
  | EOF
  | ADD
  | SUB
  | MUL
  | VARID of (Annot * Int)
  | DONGTAN of (Annot)
  | JUN of (Annot)
  | FIGHTING of (Annot)
  | SIK of (Annot)
  | KIK of (Annot)
  | QO
  | EX
  | START
  | END
  | NEWLINE
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_VARID
    | TOKEN_DONGTAN
    | TOKEN_JUN
    | TOKEN_FIGHTING
    | TOKEN_SIK
    | TOKEN_KIK
    | TOKEN_QO
    | TOKEN_EX
    | TOKEN_START
    | TOKEN_END
    | TOKEN_NEWLINE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_stmtInfos
    | NONTERM_stmtInfosAux
    | NONTERM_stmtInfo
    | NONTERM_write
    | NONTERM_expr
    | NONTERM_const
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Prog) 
